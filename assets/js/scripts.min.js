
// Driver Component //
class Driver extends React.Component{

	constructor(props){
		super(props);
		this.driverName = props.driverName;

		// bind call to driverTasksCompleted to parent method //
		this.driverTasksCompleted = props.driverTasksCompleted;

		// bind call to actionsMessage to parent method //
		this.actionsMessage = props.actionsMessage;

		// Generate Job Numbers //
		var jobNumbersTaken = [];
		var jobNumbersArray = [];

		for(var i=200; i > 100; i--){
			var job = "DELI-033" + i;
			jobNumbersArray.push(job);
		}

		var i = 0;
		var driverJobNumbers = [];

		while(i < 5){

			var newJobNumber = jobNumbersArray[Math.floor(Math.random() * jobNumbersArray.length)];
			if( jobNumbersTaken.indexOf(newJobNumber) == -1){
				
				jobNumbersTaken.push(newJobNumber);
				driverJobNumbers.push(newJobNumber);
				i++;
			}
		}

		// Set State Variables //
		this.state = {
			jobNumbers: driverJobNumbers,
			completedJobsNum: 0,
			completedJobs: "-",
			currentJob: driverJobNumbers[0]
		};

	}

	// set interval to refresh every 5 seconds //
	componentDidMount(){
		this.timeId = setInterval( () => this.tick(), 5000);
	}

	// remove the interval when destroying the component //
	componentWillUnmount(){
		clearInterval(this.timeId);
	}

	// method to refresh the data //
	tick(){

		// randomise job completed - has 75% chance //
		var rand = Math.floor(Math.random() * 5);
		if( rand != 4){

			// increment completed tasks //
			this.setState({
				completedJobsNum: this.state.completedJobsNum+1
			});

			// if completed less then 5 tasks, give new //
			if(this.state.completedJobsNum+1 <= 5){

				// Previous job //
				var previousJobs = this.state.completedJobs;
				var previousCurrentJob = this.state.currentJob;

				// Set new job //
				var newJobNumber = this.state.jobNumbers[this.state.completedJobsNum];

				// If this was first job //
				if( previousJobs == "-"){

					this.setState({
						completedJobs: previousCurrentJob,
						currentJob: newJobNumber 
					});

				}else{
					var previousJobs = this.state.completedJobs;
					this.setState({
						completedJobs: previousJobs + "<p>" + previousCurrentJob + "</p>",
						currentJob: newJobNumber
					});

				}

			// if all tasks completed - call parent method driverTasksCompleted() //
			}else{
				clearInterval(this.timeId);

				var previousJobs = this.state.completedJobs;
				var previousCurrentJob = this.state.currentJob;

				this.setState({
					completedJobs: previousJobs + "<p>" + previousCurrentJob + "</p>",
					currentJob: "-"
				});
				
				this.driverTasksCompleted();
			}

			
		}
	}

	// calls parent method to call InfoBox method to print message //
	sendDriverMessage(driverName){
		this.actionsMessage("Message", "Your message to " + driverName + " was sent.");
	}

	// calls parent method to call InfoBox method to print message //
	callDriver(driverName){
		this.actionsMessage("Call", "Driver " + driverName + " has received your call.");
	}

	// calls parent method to call InfoBox method to print schedules //
	viewSchedule(props){
		this.actionsMessage("Schedule", "Today's schedule for " + this.driverName + ": <br>" + this.state.jobNumbers);
	}

	render(){
		return(
			<tr>
				<td>{this.driverName}</td>
				<td className="completed-jobs" dangerouslySetInnerHTML={{__html: this.state.completedJobs}}></td>
				<td>{this.state.currentJob}</td>
				<td className="actions">
					<div>
						<a onClick={() => this.viewSchedule()}>View Schedule</a>
					</div>
					<div>
						<a onClick={() => this.sendDriverMessage(this.driverName)}>Send Message</a>
					</div>
					<div>
						<a onClick={() => this.callDriver(this.driverName)}>Call Mobile</a>
					</div>
				</td>
			</tr>
		);
	}
}

class InfoBox extends React.Component{

	constructor(props){
		super(props);

		// only start app once //
		this.appStarted = false;

		// bind call to restartApp to parent method //
		this.restartApp = props.restartApp;
			
		// bind this to closeInformationBox method //
		this.closeInformationBox = this.closeInformationBox.bind(this);

		// Set empty states for actions messages //
		this.state = {
			actionHeader: "",
			actionMessage: ""
		};
	}

	// method to update actions state variables //
	actionsMessage(header,message){
		
		this.setState({
			actionHeader: header,
			actionMessage: message
		});
		
		document.getElementById("info-box").className = "actions";

	}

	// method to close information box and start the app //
	closeInformationBox(){

		// close the info box //
		document.getElementById("info-box").className = "hide";
		
		// start the app if not already started
		if(!this.appStarted){
			this.appStarted = true;
			this.restartApp();
			document.getElementById("my-app").className = "started";
		}
	}

	render(){
		return(
			<div id="info-box" className="information">
				<div className="outer-wrapper">
					<div className="inner-wrapper">

						<div className="information-msg">
							<h2>Welcome</h2>
							<p>This is React Delivery App Demo by Maksym Jakubowski.</p>
							<p>Its using 3 React Components - App, InfoBar and Driver to communicate between each other.</p>
							<p>Every 5 seconds it stimulates an update and a driver to complete his current delivery task.</p>
							<div className="buttons">
								<a className="button blue" onClick={this.closeInformationBox}>Okay</a>
								<a className="button transparent" href="https://github.com/" target="_blank">Show source code</a>
							</div>
						</div>

						<div className="app-finished-msg">
							<h2>Completed</h2>
							<p>All drivers have completed their daily tasks.</p>
							<p>What would you like to do?</p>
							<div className="buttons">
								<a className="button blue" onClick={this.restartApp}>Reload the app</a>
								<a className="button transparent" href="https://github.com/" target="_blank">Show source code</a>
								<a className="button red" onClick={this.closeInformationBox}>Close this</a>
							</div>
						</div>

						<div className="actions-msg">
							<h2>{this.state.actionHeader}</h2>
							<p dangerouslySetInnerHTML={{__html: this.state.actionMessage}}></p>
							<div className="buttons">
							<a className="button blue" onClick={this.closeInformationBox}>Okay</a>
							</div>
						</div>

					</div>
				</div>
			</div>
		);
	}

}

// Top Bar Component - got buttons navigation and clock //
class TopBar extends React.Component{

	constructor(props){
		super(props);

		this.restartApp = props.restartApp;
	}

	render(){
		return(
			<div id="top-bar">
				<div id="nav">
					<a className="button round transparent information" onClick={this.openInfoBox}>
						Information
					</a>
					<a className="button round transparent reload" onClick={this.restartApp}>
						Reload
					</a>
				</div>
				<Clock />
			</div>
		);
	}

	// opens the info box //
	openInfoBox(){
		document.getElementById("info-box").className = "information";
	}
}

// Clock Component
class Clock extends React.Component{
	
	constructor(props){
		super(props);
		this.state = {date: new Date()};
	}

	// Start the timer //
	componentDidMount(){
		this.timeId = setInterval( () => this.tick(), 1000);
	}

	// Remove the timer //
	componentWillUnmount(){
		clearInterval(this.timeId);
	}

	// get new time //
	tick(){
		this.setState({
			date: new Date()
		});
	}

	render(){
		return(
			<div id="clock">
				<p>{this.state.date.toLocaleTimeString()}</p>
			</div>
		);
	}
}


// Main App Component //
class MyApp extends React.Component{

	constructor(props){
		
		super(props);
		const me = this;

		this.state = {
			driversDailyCompleted : 0,
			driversIndexKey: 7
		};

		// Create Ref to child InfoBox Component to call its actionsMessage method //
		this.infoBox = React.createRef();
		
		// driver names array //
		this.driversArray = [
			"Andrzej Kowalczyk",
			"Krzysztof Nowosad",
			"Maciej Szafraniak",
			"Mariusz Laskowski",
			"Cezary Szturo",
			"Jacek Piastowski",
			"Waldek Witkowski"
		];

		// drivers react elements array //
		this.driversElements = [];
	}

	render(){
		return(
			<div className="content-wrapper">
				<InfoBox ref={this.infoBox} restartApp={this.restartApp} />
				<div className="app-wrapper">

					<TopBar restartApp={this.restartApp}/>

					<div id="today-date">
						<h3>Delivery Management App Demo</h3>
					</div>

					<div id="delivery-table-wrapper">
					
						<table id="delivery-table">
							<thead>
								<tr>
									<th>Driver Name</th>
									<th>Tasks Completed</th>
									<th>Current Task</th>
									<th>Actions</th>
								</tr>
							</thead>
							<tbody>
								{this.driversElements}
							</tbody>
						</table>
					</div>
					
				</div>
			</div>
		);
	}
	
	// Define methods with arrow to allow this to point to parent // 

	// method called from Driver when completed all daily tasks //
	driverTasksCompleted = () => {
		this.setState({
			driversDailyCompleted: this.state.driversDailyCompleted+1
		});

		if(this.state.driversDailyCompleted == 7){
			document.getElementById("info-box").className = "app-finished";
		}
	}
	
	// method called from Driver passing message to InfoBox  //
	actionsMessage = (header,message) => {
		this.infoBox.current.actionsMessage(header,message);
	}

	// Method to start and restart the app functionality // 
	restartApp = () => {

		// use const variable to bind this to passed methods //
		const me = this;

		// Empty drivers react elements array and repopulate, set new index keys to force React to refresh //
		me.driversElements = [];
		var startIndex = this.state.driversIndexKey;

		this.driversArray.forEach(function(driver, index){
			me.driversElements.push(
				<Driver 
					actionsMessage={me.actionsMessage} 
					driverTasksCompleted={me.driverTasksCompleted} 
					key={startIndex+index+1} 
					driverName={driver} 
				/>
			);
		});

		// reset state, and set new index // 
		this.setState({
			driversDailyCompleted: 0,
			driversIndexKey: startIndex+7
		});

		// close the info box //
		document.getElementById("info-box").className = "hide";

		this.forceUpdate();
	}

}

// wait for window to load, then init app //
(function() {
	
	// Init App //
	ReactDOM.render(
		<MyApp />,
		document.getElementById("my-app")
	);

})();